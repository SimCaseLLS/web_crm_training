<<<<<<< HEAD
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrainingCentersCRM.Models
{
    using System;
    using System.Collections.Generic;
    
=======
namespace TrainingCentersCRM.Models
{

using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Data.Entity.Spatial;

    [Table("TrainingCourses")]
>>>>>>> 77e7434ea7678d938336fcb397236ab4ac0ef878
    public partial class TrainingCours
    {
        public TrainingCours()
        {
<<<<<<< HEAD
            this.CourseModules = new HashSet<CourseModule>();
            this.HoldCourses = new HashSet<HoldCours>();
            this.QualificationTrainingCours = new HashSet<QualificationTrainingCour>();
            this.RelatedCourses = new HashSet<RelatedCours>();
            this.RelatedCourses1 = new HashSet<RelatedCours>();
            this.TrainingCenterCourses = new HashSet<TrainingCenterCours>();
            this.TrainingCourseTeachers = new HashSet<TrainingCourseTeacher>();
        }
    
        public int Id { get; set; }
        public string Title { get; set; }
        public string ShortDescription { get; set; }
        public Nullable<int> Hourse { get; set; }
        public Nullable<decimal> PriceForOrganizations { get; set; }
        public Nullable<decimal> PriceForIndividuals { get; set; }
        public Nullable<decimal> CostOfOneHourForOrganizations { get; set; }
        public Nullable<decimal> CostOfOneHourForIndividuals { get; set; }
        public Nullable<int> LevelOfDifficulty { get; set; }
        public string RequiredPreliminaryPreparation { get; set; }
        public string MandatoryPreliminaryPreparation { get; set; }
        public Nullable<int> IdTraningCenter { get; set; }
        public Nullable<int> IdObject { get; set; }
    
        public virtual ICollection<CourseModule> CourseModules { get; set; }
        public virtual ICollection<HoldCours> HoldCourses { get; set; }
        public virtual ICollection<QualificationTrainingCour> QualificationTrainingCours { get; set; }
        public virtual ICollection<RelatedCours> RelatedCourses { get; set; }
        public virtual ICollection<RelatedCours> RelatedCourses1 { get; set; }
        public virtual ICollection<TrainingCenterCours> TrainingCenterCourses { get; set; }
        public virtual ICollection<TrainingCourseTeacher> TrainingCourseTeachers { get; set; }
    }
=======
            CourseModules = new HashSet<CourseModule>();
            HoldCourses = new HashSet<HoldCours>();
            QualificationTrainingCours = new HashSet<QualificationTrainingCour>();
            ScheduleTtrainingCourses = new HashSet<ScheduleTtrainingCours>();
            TrainingCenterCourses = new HashSet<TrainingCenterCours>();
        }

        public int Id { get; set; }

        [StringLength(255, ErrorMessage = "Длина строки должна быть менее 256 символов")]
        [Required]
        [Display(Name = "Название")]
        public string Title { get; set; }

        [StringLength(2048, ErrorMessage = "Длина строки должна быть менее 1024 символов")]
        [Required]
        [Display(Name = "Краткое описание")]
        public string ShortDescription { get; set; }

        [RegularExpression("[0-9]+", ErrorMessage = "Недопустимое значение")]
        [Range(0, 1000, ErrorMessage="Недопустимое количество часов")]
        [Display(Name = "Количество часов")]
        public Nullable<int> Hourse { get; set; }

        [RegularExpression(@"^[\d,]+(\.\d{1,5})?$", ErrorMessage = "Недопустимое значение")]
        [Display(Name = "Стоимость для организаций")]
        [Column(TypeName = "money")]
        public Nullable<decimal> PriceForOrganizations { get; set; }

        [RegularExpression(@"^[\d,]+(\.\d{1,5})?$", ErrorMessage = "Недопустимое значение")]
        [Display(Name = "Стоимость для физических лиц")]
        [Column(TypeName = "money")]
        public Nullable<decimal> PriceForIndividuals { get; set; }

        [RegularExpression(@"^[\d,]+(\.\d{1,5})?$", ErrorMessage = "Недопустимое значение")]
        [Display(Name = "Стоимость часа для организаций")]
        [Column(TypeName = "money")]
        public Nullable<decimal> CostOfOneHourForOrganizations { get; set; }

        [RegularExpression(@"^[\d,]+(\.\d{1,5})?$", ErrorMessage = "Недопустимое значение")]
        [Display(Name = "Стоимость часа для физических лиц")]
        [Column(TypeName = "money")]
        public Nullable<decimal> CostOfOneHourForIndividuals { get; set; }

        [RegularExpression("[0-9]+", ErrorMessage = "Недопустимое значение")]
        [Display(Name = "Сложность")]
        public Nullable<int> LevelOfDifficulty { get; set; }

        [Display(Name = "Требуемая предварительная подготовка")]
        [StringLength(1023, ErrorMessage = "Длина строки должна быть менее 1024 символов")]
        public string RequiredPreliminaryPreparation { get; set; }

        [Display(Name="Идентификатор курса в Moodle")]
        [RegularExpression("[0-9]+", ErrorMessage = "Недопустимое значение")]
        public int? MoodleId { get; set; }

        [Display(Name = "Обязательная предварительная подготовка")]
        [StringLength(1023, ErrorMessage = "Длина строки должна быть менее 1024 символов")]
        public string MandatoryPreliminaryPreparation { get; set; }

        public int? IdObject { get; set; }

        public virtual ICollection<CourseModule> CourseModules { get; set; }

        public virtual ICollection<HoldCours> HoldCourses { get; set; }

        public virtual ICollection<QualificationTrainingCour> QualificationTrainingCours { get; set; }

        //public virtual ICollection<RelatedCourse> RelatedCourses { get; set; }
        //public virtual ICollection<RelatedCourse> RelatedCourses1 { get; set; }

        public virtual ICollection<ScheduleTtrainingCours> ScheduleTtrainingCourses { get; set; }

        public virtual ICollection<TrainingCenterCours> TrainingCenterCourses { get; set; }
    }

>>>>>>> 77e7434ea7678d938336fcb397236ab4ac0ef878
}
